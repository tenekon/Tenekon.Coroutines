name: Build, then publish

on:
  push:
    branches:
      - "*"
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      version:
        required: false
        default: ""
        description: |
          Manually specify the version. The following will happen:
          1. A tag with specified version will be created at current tip of branch.
          If version is empty then (pre-)release version will be calculated.
      pre-release:
        required: true
        type: boolean
        default: true
        description: |
          If pre-release is set to true the version is calculated as pre-release, otherwise as release.
      dry-run:
        required: false
        type: boolean
        default: false
        description: |
          If dry run is enabled tag won't be pushed and packages are not pushed either.

env:
  VERNUNTII_VERBOSITY: Debug
  MSBUILD_VERBOSITY: Normal
  MSBUILD_CONFIGURATION: Release
  CACHE_ID: GITHUB_VERSION_CACHE
  DOTNET_VERSION: "6.0.x"
  DRY_RUN: ${{ github.event.inputs.dry-run == 'true' && 'true' || 'false' }}
  PRE_BUILT_ARTIFACTS_NAME: "pre-built_artifacts"
  MSBUILD_INTEGRATION_NAME: Vernuntii.Console.MSBuild.Orphan
  # Make sure it is escaped in case the path has spaces
  # Required for bash to expand tilde to $HOME.
  PUBLISHABLE_PACKAGES_DIR: ~/publishable_packages

jobs:
  produce-vernuntii-artifact:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Produce Vernuntii artifact
        uses: ./.github/actions/produce-vernuntii-artifact
        with:
          artifact-name: ${{ env.PRE_BUILT_ARTIFACTS_NAME }}
          console-tool-project-name: Vernuntii.Console.GlobalTool.win-x64
          msbuild-integration-project-name: ${{ env.MSBUILD_INTEGRATION_NAME }}
          msbuild-verbosity: ${{ env.MSBUILD_VERBOSITY }}
          msbuild-configuration: ${{ env.MSBUILD_CONFIGURATION }}

  test:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build
        run: >
          dotnet build
          --verbosity $MSBUILD_VERBOSITY
          --configuration $MSBUILD_CONFIGURATION
        shell: bash

      - name: Test
        run: >
          dotnet test
          --verbosity $MSBUILD_VERBOSITY
          --configuration $MSBUILD_CONFIGURATION
          --no-build
        shell: bash

  pack:
    runs-on: windows-2022
    needs: produce-vernuntii-artifact
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - uses: actions/download-artifact@v3
        id: pre-built-artifacts
        with:
          name: ${{ env.PRE_BUILT_ARTIFACTS_NAME }}
          path: ~/${{ env.PRE_BUILT_ARTIFACTS_NAME }}

      - uses: vernuntii/actions/install/dotnet-tool@main
        with:
          add-source: ${{ steps.pre-built-artifacts.outputs.download-path }}

      - name: Enable Vernuntii MSBuild Integration system-wide
        uses: vernuntii/actions/install/msbuild-import@main
        with:
          msbuild-integration-package-name: ${{ env.MSBUILD_INTEGRATION_NAME }}
          msbuild-integration-package-source: "${{ steps.pre-built-artifacts.outputs.download-path }}"
          verbosity: ${{ env.VERNUNTII_VERBOSITY }}
          cache-id: ${{ env.CACHE_ID }}

      - name: Set semantic version from non-empty event input
        if: >
          github.event_name == 'workflow_dispatch'
          && github.event.inputs.version != ''
        run: |
          echo "Vernuntii_SemanticVersion=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        shell: bash

      - name: Set pre-release version from console application
        if: >
          ( 
          github.event_name == 'workflow_dispatch'
          && github.event.inputs.version == ''
          && github.event.inputs.pre-release == 'true'
          ) 
          || github.event_name != 'workflow_dispatch'
        uses: vernuntii/actions/execute@main
        with:
          verbosity: ${{ env.VERNUNTII_VERBOSITY }}
          cache-id: ${{ env.CACHE_ID }}
          duplicate-version-fails: true

      - name: Set release version from console application
        if: >
          github.event_name == 'workflow_dispatch'
          && github.event.inputs.version == ''
          && github.event.inputs.pre-release == 'false'
        uses: vernuntii/actions/execute@main
        with:
          cache-id: ${{ env.CACHE_ID }}
          duplicate-version-fails: true
          is-release: true

      - name: Set version from environment as output parameter
        id: semantic-version
        run: >
          echo "semantic-version=${{ env.Vernuntii_SemanticVersion }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Pack projects
        run: >
          dotnet pack
          --verbosity $MSBUILD_VERBOSITY
          --configuration $MSBUILD_CONFIGURATION
          --output ${{ env.PUBLISHABLE_PACKAGES_DIR }}
          -consoleLoggerParameters:PerformanceSummary
          -nodeReuse:true 
        shell: bash

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: publishable-nuget-packages
          path: |
            ${{ env.PUBLISHABLE_PACKAGES_DIR }}/**/*.nupkg
            ${{ env.PUBLISHABLE_PACKAGES_DIR }}/**/*.snupkg
          if-no-files-found: error

    outputs:
      semantic-version: ${{ steps.semantic-version.outputs.semantic-version }}

  publish:
    runs-on: ubuntu-latest
    needs: [test, pack]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download package artifacts
        id: download-artifacts
        uses: actions/download-artifact@v3
        with:
          name: publishable-nuget-packages
        continue-on-error: true

      - name: Display structure of downloaded files
        if: ${{ env.DRY_RUN == 'true' }}
        run: ls -R
        shell: bash

      - name: Push nupkg's
        id: push-nupkg
        if: ${{ steps.download-artifacts.outcome == 'success' && env.DRY_RUN == 'false' }}
        run: |
          echo 'console<<EOF' >> $GITHUB_OUTPUT
          $(dotnet nuget push '**/*.nupkg' --source 'https://api.nuget.org/v3/index.json' --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate >> $GITHUB_OUTPUT) || EXIT_CODE=$?
          echo 'EOF' >> $GITHUB_OUTPUT
          exit $EXIT_CODE
        shell: bash
        continue-on-error: true

      - name: Push nupkg's console output
        if: steps.push-nupkg.outcome != 'skipped'
        run: echo "${{ steps.push-nupkg.outputs.console }}"
        shell: bash

      - name: Push nupkg's suceeded
        if: "${{ steps.push-nupkg.outcome == 'failure' && !contains(steps.push-nupkg.outputs.console, 'error: File does not exist') }}"
        run: exit 1
        shell: bash

      - name: Push snupkg's
        id: push-snupkg
        if: ${{ steps.download-artifacts.outcome == 'success' && env.DRY_RUN == 'false' }}
        run: |
          echo 'console<<EOF' >> $GITHUB_OUTPUT
          $(dotnet nuget push '**/*.snupkg' --source 'https://api.nuget.org/v3/index.json' --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate >> $GITHUB_OUTPUT) || EXIT_CODE=$?
          echo 'EOF' >> $GITHUB_OUTPUT
          exit $EXIT_CODE
        shell: bash
        continue-on-error: true

      - name: Push snupkg's console output
        if: steps.push-snupkg.outcome != 'skipped'
        run: echo "${{ steps.push-snupkg.outputs.console }}"
        shell: bash

      - name: Push snupkg's suceeded
        if: "${{ steps.push-snupkg.outcome == 'failure' && !contains(steps.push-snupkg.outputs.console, 'error: File does not exist') }}"
        run: exit 1
        shell: bash

  git-tag:
    runs-on: ubuntu-latest
    needs: [pack, publish]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Create (pre-)release tag remotely
        if: ${{ env.DRY_RUN == 'false' }}
        run: |
          git tag ${{ needs.pack.outputs.semantic-version }}
          git push --tags
        shell: bash

      - name: Create (pre-)release tag remotely (dry-run)
        if: ${{ env.DRY_RUN == 'true' }}
        run: echo ${{ needs.pack.outputs.semantic-version }}
        shell: bash
