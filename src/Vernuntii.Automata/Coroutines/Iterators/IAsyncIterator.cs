namespace Vernuntii.Coroutines.Iterators;

public interface IAsyncIterator
{
    /// <summary>
    /// The value yielded when the underlying coroutine suspends at a compatible suspension point.
    /// A non-compatible suspension point is defined as awaiting a task-like object that is not a coroutine effect.
    /// </summary>
    /// <returns></returns>
    public object Current { get; }
    /// <summary>
    /// <see cref="MoveNextAsync"/> will suspend at the next compatible suspension point in the underlying coroutine.
    /// A non-compatible suspension point is defined as awaiting a task-like object that is not a coroutine effect.
    /// </summary>
    /// <returns></returns>
    public ValueTask<bool> MoveNextAsync();
    public void YieldReturn<TResult>(TResult result);
    public void Return();
    public void Throw(Exception e);
    /// <summary>
    /// Once <see cref="MoveNextAsync"/> returns <see langword="false"/>, 
    /// <see cref="GetResult"/> will return either a result of type <typeparamref name="TReturnResult"/> or the exception generated by the underlying coroutine.
    /// The behavior of <see cref="GetResult"/> is identical to <see cref="ValueTaskAwaiter{TReturnResult}.GetResult"/>; it cannot be called a second time.
    /// </summary>
    /// <returns></returns>
    public void GetResult();
    /// <summary>
    /// Resumes execution from the last suspension point, breaking the iterator semantics by transferring full responsibility back to the coroutine.
    /// The behavior of <see cref="GetResultAsync"/> is identical to awaiting a <see cref="ValueTask"/>; it cannot be called a second time.
    /// </summary>
    /// <returns></returns>
    public Coroutine GetResultAsync();
}
